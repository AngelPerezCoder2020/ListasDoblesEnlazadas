package ColasConJavaPackage;
import com.umg.data.structures.Queue.ArrayBasedQueue;
import com.umg.data.structures.Queue.LinkedListBasedQueue;
import java.util.Scanner;

public class ColasConJavaMain {
	public static void main(String[] args) {
		ArrayBasedQueue ColaArray = new ArrayBasedQueue(10);
		LinkedListBasedQueue ColaLista = new LinkedListBasedQueue();
		Scanner ent = new Scanner(System.in);
		String opc = "";
		while(false==opc.equals("0")) {
			System.out.println("COLAS by Ángel Pérez \n\nComo deseas manejar las Colas? \n1. Basadas en Arrays \n2. Basadas en Listas Enlazadas \n3. SALIR DEL PROGRAMA");
			opc = ent.nextLine();
			switch(opc) {
			case "1":{
				while(false==opc.equals("5")) {
					System.out.println(" \n\nUsted está utilizando las colas basadas en Arrays \nSu Lista tiene un espacio en memoria de 10 unidades "
							+ " \nQue deseas hacer con ella? \n\n1. Encolar \n2. Desencolar \n3. Obtener Cima \n4. Ver Tamaño \n5. REGRESAR");
					opc = ent.nextLine();
					switch(opc) {
					case "1":{
						break;
					}
					case "2":{
						break;
					}
					case "3":{
						break;
					}
					case "4":{
						break;
					}
					case "5":{
						break;
					}
					default:{
						break;
					}
					}
					}
				}
				break;	
			}
			case "2":{
				while(false==opc.equals("5")) {
					System.out.println(" \n\nUsted está utilizando las colas basadas en Listas Enlazadas \nSu Lista cuenta con almacenamiento Dinamico en memoria "
							+ " \nQue deseas hacer con ella? \n\n1. Encolar \n2. Desencolar \n3. Obtener Cima \n4. Ver Tamaño \n5. REGRESAR");
					opc = ent.nextLine();
					switch(opc) {
					case "1":{
						break;
					}
					case "2":{
						break;
					}
					case "3":{
						break;
					}
					case "4":{
						break;
					}
					case "5":{
						break;
					}
					default:{
						break;
					}
					}
					}
				break;	
			}
			case "0":{
				System.out.println(" \nADIOSS ;)");
				ent.nextLine();
				break;
			}
			default:{
				System.out.println(" \nEsa no es una opción :)");
				ent.nextLine();
				break;
			}
			}
		}
	}
}